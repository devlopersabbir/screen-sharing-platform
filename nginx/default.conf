
# Redirect HTTP to HTTPS
server {
    listen 80;
    listen [::]:80; # Listen on IPv6 as well
    server_name 145.223.97.55; # Replace with your VPS public IP address

    # Redirect all HTTP traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS server block
server {
    listen 443 ssl;
    listen [::]:443 ssl; # Listen on IPv6 as well
    server_name 145.223.97.55; # Replace with your VPS public IP address

    # SSL certificates will be mounted into /etc/nginx/certs inside the container
    ssl_certificate /etc/nginx/certs/server.crt;
    ssl_certificate_key /etc/nginx/certs/server.key;

    # Basic SSL/TLS settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1h;
    ssl_session_tickets off;

    # Proxy settings for Node.js Socket.IO server
    location / {
        # 'server' is the service name of our Node.js container in docker-compose
        # '5152' is the internal port the Node.js app listens on
        proxy_pass http://server:5152;
        proxy_http_version 1.1;

        # WebSocket upgrade headers - CRITICAL for Socket.IO
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade"; # Must be "upgrade" for WebSockets

        # Forward client's IP and host
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme; # Tells Node.js if original request was HTTP/HTTPS

        # Prevents "502 Bad Gateway" when connection is idle for long WebSockets
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;
        proxy_connect_timeout 300s;
    }
}
